=> Primary Concern:
    -> Being able to see the video is the primary concern.
-> After primary concerns we have to define the data
    *> Product requirement docs -mapped_into-> Features / abstract concepts --> data definitions --> objects --> database
-> After we define the database we can now define the endpoints through which we can manipulate data.
-> You should have multiple servers spread across the world to avoid the single point of failure.
-> You could also have multiple server inside the same country.
-> Build a system that can Scale & Extend and when requirements change.
-> Finally this design needs to be tested.

*) Live Streaming Application:
    *> Requirements:
        1. Streaming video
        2. Processing video
        3. Broadcasting
        4. FailProof
        5. Advertisement
        6. Reactions
        7. Disclaimers/ News Flashes
        8. Degradation of video quality
        9. Multiple device support
    -> We have to thing of various failure scenarios like what if the database storing the videos crashes, what if the specific firewall block all of the request.
    -> For storing comments we can use SQL Database.
    *> Different Apis needs to have different behavior:
        -> Comment:
            -> For comment we don't want continuous data to be interact between client & server
            -> We will comment on the video and that's it.
            -> For comment we will use HTTP network protocol.
        -> VideoFrame:
            -> For this api we need continuous video frames for let's say 10 seconds.
            -> For this we might need to use different network protocol to happen.
            *> Different way to request the video frame:
                1> give request amount of frame ex: 10sec video after 10min After that we can again request for the next frame or the same frame.
                    -> Here this is Stateless protocol
                    -> HTTP is the stateless protocol
                2> Another way could be to get the next 10sec video from the previously requested video frame by that specific user, where next will be known to the server
                    -> Here this is StateFull protocol
                    -> For that we can use:
                        -> TCP protocol: Reliable
                        -> UDP protocol: Real time efficient protocol
                    -> so we will going to use WebRTC protocol.
                    -> Or specifically we can use MPEG-DASH protocol, MPEG is a protocol & DASH stand for Dynamic adaptive streaming over HTTP
        -> For upload the raw video sending from the video owner we can use RTMP protocol because it is more Reliable then the WebRTC because in WebRTC there is a chance of data loss.
    *> For database
        -> To store the videos we can use file system solutions like: HDFS, Vimeo, AWS S3
        -> To store the user, comments data we can use MySQL, Postgresql database.
    
    *> How we convert this RAW data and serve to customers?
        -> For that we might first need to convert the live stream video into different resolution and then send to the customer as per requirements.
        -> For that there needs to be some form of transformation service which will going to take the live stream video and then convert into different resolution.
        -> To convert the raw video into segments we will first convert the raw videos into segments like 10s of video and then we will forward to convert that segments into different resolutions.
        *> Map Reduce:
            -> './04_Map_Reduce.png'
            -> So to convert the raw video into different resolution we use Map reduce.
            -> In here we can take one video, split into peaces which are 10 seconds long and then send it to different servers to get different outputs.
            -> After completion of all the task we will store that into the database

    -> Another this is do you want to store some video frame into the server as a cache, for that we can store last 10s,20s or 30s etc.. amount of video as a cache so that user can get the video as fast as possible.

    -> https://youtu.be/m8Icp_Cid5o?t=2517