-> https://youtu.be/9-hjBGxuiEs
*) Functional Requirement:
    -> Post (Image + Video)
    -> Like, Comment, Share
    -> Add Friends
    -> See Timeline
    -> See a User's Post, Profile
    -> Activity Log

*) Non Functional Requirement
    -> Read Heavy
    -> Fast Rendering, Posting
    -> Lag is OK
        - means if user post something and seen by others after some seconds then it is ok
    -> Access Pattern
        - Means when image & video will get uploaded until 1-2 weeks there will be high traffic on that content after that the access of that content will be lower
    -> Global
        - Should be able to handle multiple language
        - Accessible by any person from any where
    -> Scale
        - 1.7 billion DAU(Daily active user)
        - 2.6 Billion MAU(Monthly active user)
        - 95% User from Mobile
            -> So, optimized for mobile devices
        - Events/min:
            - 150k Images
            - 300k statuses
            - 500k Comments

*) Users
    -> We have categories user in different segments and we will handle these user in different way
        - Famous User
            -> have Huge number of friends & Follower
        - Active User
            -> Active in 3 days
            -> We will optimize those user so that page load for them will be faster
        - Live User
        - Passive user
            -> Not Regularly active
            -> We will not try to cache the content for them.
        - Inactive User
            -> Deactivate Accounts

*) Architecture Components:
    -> Divided into multiple components
    -> Components in Black could be Load balancer, reverse proxy, authentication & authorization layer
    -> Components in Blue are web services for the specific function.
    -> Components in Read are the Databases, Data Store, any Cluster like Kafka cluster, Hadoop Cluster.

*) Overall Architecture
    -> './03_Overrall_Architecture.png', './04_Overrall_Architecture.png'
    -> 'User On Boarding' components with other services:
        - User Interaction like look into profile, creating their profile, updating their profile
        - Service handle for user information
        - For that we will use MySQL database because user information is the standard and a relational set of data points
        - as well as the user information is something that will not updated very frequently
        - we will cache the user information into redis
        - So, first we will try to look the user information into the redis and if it finds the information then we will response that data but if doesn't find the info then get data from main database, response the data, update redis.
        - Whenever user logged in or created the account then an even is pushed into kafka like for new account we will be doing fraud check to validate for fake account.
    -> 'Add Friends' component with other services:
    -> Redis Store:
        - user_id:
            - User Details
            - Friends
            - User type
            - Relevance tags
                -> there is a lots of information that can be shown on facebook. Let's say if we update a status about sports, Instead of send that to all of the friends, if we restrict that to only those friends who were actually interested in sports, then that will lead to an engaging conversation between me and them.
            - Last access time


*) Add Post, User Profile, Timelines:
    -> https://youtu.be/9-hjBGxuiEs?t=1079